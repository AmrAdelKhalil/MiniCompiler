<CLASS> : class
<ID> : Factorial
<LEFT_CURLY_B> : {
<EOL> : \n
<PUBLIC> : public
<STATIC> : static
<VOID> : void
<MAIN> : main
<LEFT_ROUND_B> : (
<STRING> : String
<LEFT_SQUARE_B> : [
<RIGHT_SQUARE_B> : ]
<ID> : a
<RIGHT_ROUND_B> : )
<LEFT_CURLY_B> : {
<SYSTEM.OUT.PRINTLN> : System.out.println
<LEFT_ROUND_B> : (
<NEW> : new
<ID> : Fac
<LEFT_ROUND_B> : (
<RIGHT_ROUND_B> : )
<DOT> : .
<ID> : ComputeFac
<LEFT_ROUND_B> : (
<INTEGRAL_LITERAL> : 10
<RIGHT_ROUND_B> : )
<RIGHT_ROUND_B> : )
<SEMI_COLON> : ;
<EOL> : \n
<RIGHT_CURLY_B> : }
<EOL> : \n
<RIGHT_CURLY_B> : }
<EOL> : \n
<CLASS> : class
<ID> : Fac
<LEFT_CURLY_B> : {
<EOL> : \n
<PUBLIC> : public
<INT_DATA_TYPE> : int
<ID> : ComputeFac
<LEFT_ROUND_B> : (
<INT_DATA_TYPE> : int
<ID> : num
<RIGHT_ROUND_B> : )
<LEFT_CURLY_B> : {
<EOL> : \n
<INT_DATA_TYPE> : int
<ID> : num
<SEMI_COLON> : ;
<EOL> : \n
<IF_CONDITION> : if
<LEFT_ROUND_B> : (
<ID> : n
<LESS_THAN> : <
<INTEGRAL_LITERAL> : 1
<RIGHT_ROUND_B> : )
<EOL> : \n
<ID> : num
<EQUAL> : =
<INTEGRAL_LITERAL> : 1
<SEMI_COLON> : ;
<EOL> : \n
<ELSE_CONDITION> : else
<EOL> : \n
<IF_CONDITION> : if
<LEFT_ROUND_B> : (
<ID> : u
<LESS_THAN> : <
<INTEGRAL_LITERAL> : 1
<RIGHT_ROUND_B> : )
<EOL> : \n
<IF_CONDITION> : if
<LEFT_ROUND_B> : (
<ID> : m
<LESS_THAN> : <
<INTEGRAL_LITERAL> : 1
<RIGHT_ROUND_B> : )
<EOL> : \n
<ID> : x
<EQUAL> : =
<INTEGRAL_LITERAL> : 55
<SEMI_COLON> : ;
<EOL> : \n
<ELSE_CONDITION> : else
<EOL> : \n
<IF_CONDITION> : if
<LEFT_ROUND_B> : (
<ID> : mmmm
<LESS_THAN> : <
<INTEGRAL_LITERAL> : 2
<RIGHT_ROUND_B> : )
<EOL> : \n
<IF_CONDITION> : if
<LEFT_ROUND_B> : (
<ID> : a
<LESS_THAN> : <
<INTEGRAL_LITERAL> : 7
<RIGHT_ROUND_B> : )
<EOL> : \n
<IF_CONDITION> : if
<LEFT_ROUND_B> : (
<ID> : r
<LESS_THAN> : <
<INTEGRAL_LITERAL> : 88
<RIGHT_ROUND_B> : )
<EOL> : \n
<ID> : num_aux
<EQUAL> : =
<INTEGRAL_LITERAL> : 1
<SEMI_COLON> : ;
<EOL> : \n
<ELSE_CONDITION> : else
<EOL> : \n
<ID> : num_aux
<EQUAL> : =
<ID> : num
<MULTIPLAY> : *
<LEFT_ROUND_B> : (
<THIS> : this
<DOT> : .
<ID> : ComputeFac
<LEFT_ROUND_B> : (
<ID> : num
<MINUS> : -
<INTEGRAL_LITERAL> : 1
<RIGHT_ROUND_B> : )
<RIGHT_ROUND_B> : )
<SEMI_COLON> : ;
<EOL> : \n
<RETURN> : return
<ID> : num_aux
<SEMI_COLON> : ;
<EOL> : \n
<RIGHT_CURLY_B> : }
<EOL> : \n
<RIGHT_CURLY_B> : }
<EOL> : \n
